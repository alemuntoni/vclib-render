#*****************************************************************************
#* VCLib                                                                     *
#* Visual Computing Library                                                  *
#*                                                                           *
#* Copyright(C) 2021-2024                                                    *
#* Visual Computing Lab                                                      *
#* ISTI - Italian National Research Council                                  *
#*                                                                           *
#* All rights reserved.                                                      *
#*                                                                           *
#* This program is free software; you can redistribute it and/or modify      *
#* it under the terms of the GNU General Public License as published by      *
#* the Free Software Foundation; either version 3 of the License, or         *
#* (at your option) any later version.                                       *
#*                                                                           *
#* This program is distributed in the hope that it will be useful,           *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              *
#* GNU General Public License (http://www.gnu.org/licenses/gpl.txt)          *
#* for more details.                                                         *
#****************************************************************************/

cmake_minimum_required(VERSION 3.24)
project(vclib-render)

include(vclib/cmake/vclib_common_settings.cmake)

# Add the cmake folder for find_package scripts
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

# vclib
add_subdirectory(vclib)

# external libraries
message(STATUS "VCLib-Render: external libraries")
add_subdirectory(external)

if (TARGET vclib-external-bgfx)
    get_target_property(VCLIB_BGFX_DIR vclib-external-bgfx BGFX_DIR)
    include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/bgfx_config.cmake)
endif()

set(VCLIB_RENDER_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

set(HEADERS
    include/vclib/gui/desktop_trackball.h
    include/vclib/gui/event_manager_interface.h
    include/vclib/gui/input.h
    include/vclib/gui/native_window_handle.h
    include/vclib/render/camera.h
    include/vclib/render/drawable_object_vector.h
    include/vclib/render/lights.h
    include/vclib/render/matrix.h
    include/vclib/render/mesh_render_buffers.h
    include/vclib/render/mesh_render_settings.h
    include/vclib/render/mesh_render_settings_macros.h
    include/vclib/render/trackball.h
    include/vclib/render/interfaces/drawable_mesh_i.h
    include/vclib/render/interfaces/drawable_object_i.h
    include/vclib/render/interfaces/pickable_object_i.h
    include/vclib/render/interfaces/picking_shader_program_i.h
    include/vclib/render/interfaces/shader_program_i.h
    include/vclib/render/lights/directional_light.h)

set(SOURCES
    src/gui/native_window_handle.cpp
    src/render/drawable_object_vector.cpp
    src/render/mesh_render_settings.cpp)

if (APPLE)
    list (APPEND SOURCES
        src/gui/native_window_handle.mm)
endif()

if (TARGET vclib-external-bgfx)
    list(APPEND HEADERS
        include/vclib/ext/bgfx/callback.h
        include/vclib/ext/bgfx/canvas.h
        include/vclib/ext/bgfx/context.h
        include/vclib/ext/bgfx/drawable_axis.h
        include/vclib/ext/bgfx/drawable_mesh.h
        include/vclib/ext/bgfx/mesh_render_buffers.h
        include/vclib/ext/bgfx/minimal_viewer.h
        include/vclib/ext/bgfx/shader_programs/drawable_axis_shader_program.h
        include/vclib/ext/bgfx/shader_programs/drawable_mesh_shader_program.h
        include/vclib/ext/bgfx/shader_programs/load_program.h
        include/vclib/ext/bgfx/uniforms/camera_uniforms.h
        include/vclib/ext/bgfx/uniforms/common.h
        include/vclib/ext/bgfx/uniforms/directional_light_uniforms.h
        include/vclib/ext/bgfx/uniforms/drawable_axis_uniforms.h
        include/vclib/ext/bgfx/uniforms/drawable_mesh_uniforms.h
        include/vclib/ext/bgfx/uniforms/mesh_render_settings_uniforms.h
        include/vclib/ext/bgfx/uniforms/pick_object_id_uniforms.h
        include/vclib/ext/bgfx/uniforms/shader_uniform.h)

    list(APPEND SOURCES
        src/ext/bgfx/callback.cpp
        src/ext/bgfx/canvas.cpp
        src/ext/bgfx/context.cpp
        src/ext/bgfx/drawable_axis.cpp
        src/ext/bgfx/minimal_viewer.cpp
        src/ext/bgfx/shader_programs/load_program.cpp)

    set(SHADERS
        shaders/vclib/ext/bgfx/shaders_common.sh
        shaders/vclib/ext/bgfx/drawable_axis/fs_drawable_axis.sc
        shaders/vclib/ext/bgfx/drawable_axis/varying.def.sc
        shaders/vclib/ext/bgfx/drawable_axis/vs_drawable_axis.sc
        shaders/vclib/ext/bgfx/drawable_axis/uniforms.sh
        shaders/vclib/ext/bgfx/drawable_mesh/fs_drawable_mesh.sc
        shaders/vclib/ext/bgfx/drawable_mesh/varying.def.sc
        shaders/vclib/ext/bgfx/drawable_mesh/vs_drawable_mesh.sc
        shaders/vclib/ext/bgfx/drawable_mesh/uniforms.sh
        shaders/vclib/ext/bgfx/uniforms/camera_uniforms.sh
        shaders/vclib/ext/bgfx/uniforms/directional_light_uniforms.sh
        shaders/vclib/ext/bgfx/uniforms/drawable_axis_uniforms.sh
        shaders/vclib/ext/bgfx/uniforms/drawable_mesh_uniforms.sh
        shaders/vclib/ext/bgfx/uniforms/pick_object_id_uniforms.sh
        shaders/vclib/ext/bgfx/uniforms/mesh_render_settings_uniforms.sh)
endif()

if (TARGET vclib-external-glfw)
    list(APPEND HEADERS
        include/vclib/ext/glfw/gui/input.h)

    list(APPEND SOURCES
        src/ext/glfw/gui/input.cpp)

    if (TARGET vclib-external-bgfx)
        list(APPEND HEADERS
            include/vclib/ext/glfw/bgfx/canvas_window.h
            include/vclib/ext/glfw/bgfx/minimal_viewer_window.h)

        list(APPEND SOURCES
            src/ext/glfw/bgfx/canvas_window.cpp
            src/ext/glfw/bgfx/minimal_viewer_window.cpp)
    endif()
endif()

if (TARGET vclib-external-opengl)
    list(APPEND HEADERS
        include/vclib/ext/opengl2/draw_objects2.h
        include/vclib/ext/opengl2/draw_objects3.h
        include/vclib/ext/opengl2/drawable_mesh.h)

    list(APPEND SOURCES
        src/ext/opengl2/draw_objects2.cpp
        src/ext/opengl2/draw_objects3.cpp)
endif()

if (TARGET vclib-external-qt)
    list(APPEND HEADERS
        include/vclib/ext/qt/message_hider.h
        include/vclib/ext/qt/gui/drawable_object_frame.h
        include/vclib/ext/qt/gui/drawable_object_vector_frame.h
        include/vclib/ext/qt/gui/input.h
        include/vclib/ext/qt/gui/mesh_render_settings_frame.h
        include/vclib/ext/qt/gui/q_clickable_label.h
        include/vclib/ext/qt/gui/screen_shot_dialog.h)

    list(APPEND SOURCES
        src/ext/qt/gui/drawable_object_frame.cpp
        src/ext/qt/gui/drawable_object_vector_frame.cpp
        src/ext/qt/gui/input.cpp
        src/ext/qt/gui/mesh_render_settings_frame.cpp
        src/ext/qt/gui/q_clickable_label.cpp
        src/ext/qt/gui/screen_shot_dialog.cpp)

    list(APPEND FORMS
        src/ext/qt/gui/drawable_object_frame.ui
        src/ext/qt/gui/drawable_object_vector_frame.ui
        src/ext/qt/gui/mesh_render_settings_frame.ui)

    if (TARGET vclib-external-qglviewer)
        list(APPEND HEADERS
            include/vclib/ext/qglviewer/minimal_viewer_widget.h
            include/vclib/ext/qglviewer/viewer_main_window.h)

        list(APPEND SOURCES
            src/ext/qglviewer/minimal_viewer_widget.cpp
            src/ext/qglviewer/viewer_main_window.cpp)

        list(APPEND FORMS
            src/ext/qglviewer/viewer_main_window.ui)
    endif()

    if (TARGET vclib-external-bgfx)
        list(APPEND HEADERS
            include/vclib/ext/qt/bgfx/canvas_widget.h
            include/vclib/ext/qt/bgfx/minimal_viewer_widget.h
            include/vclib/ext/qt/bgfx/viewer_main_window.h)

        list(APPEND SOURCES
            src/ext/qt/bgfx/canvas_widget.cpp
            src/ext/qt/bgfx/minimal_viewer_widget.cpp
            src/ext/qt/bgfx/viewer_main_window.cpp)

        list(APPEND FORMS
            src/ext/qt/bgfx/viewer_main_window.ui)
    endif()
endif()

source_group("Forms Files" FILES ${FORMS})

# vclib-render target
if (WIN32)
    # on windows vclib-render must be static - needed for bgfx
    # TODO - try to make it work also on windows with SHARED...
    set(VLIB_RENDER_LIB_TYPE STATIC)
else()
    set(VLIB_RENDER_LIB_TYPE SHARED)
endif()

add_library(vclib-render ${VLIB_RENDER_LIB_TYPE}
    ${HEADERS} ${SOURCES} ${FORMS})

target_include_directories(vclib-render INTERFACE ${VCLIB_RENDER_INCLUDE_DIR})
set_target_properties(vclib-render PROPERTIES
    VCLIB_RENDER_INCLUDE_DIR ${VCLIB_RENDER_INCLUDE_DIR})

if (TARGET vclib-external-bgfx)
    set_target_properties(vclib-render PROPERTIES
        VCLIB_RENDER_BGFX_SHADER_INCLUDE_DIR
        "${CMAKE_CURRENT_SOURCE_DIR}/shaders/vclib/ext/bgfx")

    set_target_properties(vclib-render PROPERTIES
        VCLIB_RENDER_BGFX_SHADERS "${SHADERS}")

    target_add_bgfx_shaders(vclib-render ${SHADERS})
endif()

target_link_libraries(vclib-render PUBLIC
    ${VCLIB_RENDER_EXTERNAL_LIBRARIES} vclib)
target_include_directories(vclib-render PRIVATE ${VCLIB_RENDER_INCLUDE_DIR})

### Examples

include(cmake/examples.cmake)

if (VCLIB_BUILD_EXAMPLES)
    get_target_property(VCLIB_EXAMPLES_DIR vclib VCLIB_EXAMPLES_DIR)
endif()

if (VCLIB_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()
